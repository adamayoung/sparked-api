name: CD

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

concurrency:
  group: "build-deploy"

permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
        version: ${{ steps.meta.outputs.version }}
        dockerImage: "${{ github.repository }}:${{ steps.meta.outputs.version }}"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ github.repository }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          logout: true

      - name: Build and Push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          build-args: TAG=${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ github.repository }}:buildcache
          cache-to: type=registry,ref=${{ github.repository }}:buildcache,mode=max

  deploy:
    name: Deploy to Azure
    needs: build
    runs-on: ubuntu-latest
    environment:
        name: production
        url: ${{ steps.deployment.outputs.webAppURL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Resource Group
        run: az group create --name ${{ vars.RESOURCE_GROUP_NAME }} --location ${{ vars.RESOURCE_GROUP_LOCATION }}

      - name: Stop App Service
        continue-on-error: true
        run: az webapp stop --name ${{ vars.WEB_APP_NAME }} --resource-group ${{ vars.RESOURCE_GROUP_NAME }}

      - name: Deploy
        id: deployment
        uses: azure/bicep-deploy@v2
        with:
          type: deployment
          operation: create
          name: Sparked-${{ needs.build.outputs.version }}
          scope: resourceGroup
          resource-group-name: ${{ vars.RESOURCE_GROUP_NAME }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          template-file: ./main.bicep
          parameters: '{"appServicePlanName":"${{ vars.APP_SERVICE_PLAN_NAME}}", "webAppName":"${{ vars.WEB_APP_NAME }}", "dockerImage":"${{ needs.build.outputs.dockerImage }}", "databaseServerName":"${{ vars.DATABASE_SERVER_NAME }}", "databaseUser":"${{ secrets.DATABASE_USER }}", "databasePassword":"${{ secrets.DATABASE_PASSWORD }}", "storageAccountName":"${{ vars.STORAGE_ACCOUNT_NAME }}", "storageContainerNames": ${{ vars.STORAGE_ACCOUNT_CONTAINER_NAMES }}, "jwtSecret":"${{ secrets.JWT_SECRET }}", "jwtExpiration":${{ vars.JWT_EXPIRATION }}, "jwtIssuer":"${{ vars.JWT_ISSUER }}", "jwtAudience":"${{ vars.JWT_AUDIENCE }}"}'

      - name: Migrate database
        run: swift run SparkedAPI migrate --yes
        env:
          POSTGRES_HOSTNAME: ${{ steps.deployment.outputs.databaseServerURL }}
          POSTGRES_USER: ${{ secrets.DATABASE_USER }}@${{ steps.deployment.outputs.databaseServerURL }}
          POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          POSTGRES_DATABASE: postgres
          JWT_SECRET: "***"
          JWT_EXPIRATION: 3600
          JWT_ISSUER: SparkedIssuer
          JWT_AUDIENCE: SparkedAudience

      - name: Start App Service
        run: az webapp start --name ${{ vars.WEB_APP_NAME }} --resource-group ${{ vars.RESOURCE_GROUP_NAME }}

      - name: Logout from Azure
        run: az logout
